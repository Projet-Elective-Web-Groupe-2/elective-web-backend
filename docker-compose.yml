version: '3'

services:
  authentication:
    build:
      context: ./authentication
    hostname: ${AUTH_HOST}
    container_name: ${AUTH_HOST}
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      - traefik
      - mysql
      - restaurant
      - product
      - monitoring
    env_file:
      - .env
    stdin_open: true
    tty: true
    labels:
     - "traefik.http.routers.authentication.rule=Host(`authentication.localhost`)"
    networks:
      - mysql_network
      - microservices_network

  users:
    build:
      context: ./users
    hostname: ${USERS_HOST}
    container_name: ${USERS_HOST}
    ports:
      - "${USERS_PORT}:${USERS_PORT}"
    depends_on:
      - traefik
      - mysql
    env_file:
      - .env
    stdin_open: true
    tty: true
    labels:
      - "traefik.http.routers.users.rule=Host(`users.localhost`)"
    networks:
      - microservices_network
      - mysql_network

  restaurant:
    build:
      context: ./restaurant
    hostname: ${RESTAURANT_HOST}
    container_name: ${RESTAURANT_HOST}
    ports:
      - "${RESTAURANT_PORT}:${RESTAURANT_PORT}"
    depends_on:
      - traefik
      - mongoDB
    env_file:
      - .env
    stdin_open: true
    tty: true
    labels:
      - "traefik.http.routers.restaurant.rule=Host(`restaurant.localhost`)"
    networks:
      - mongodb_network
      - microservices_network
  
  product:
    build:
      context: ./product
    hostname: ${PRODUCT_HOST}
    container_name: ${PRODUCT_HOST}
    ports:
      - "${PRODUCT_PORT}:${PRODUCT_PORT}"
    depends_on:
      - traefik
      - mongoDB
    env_file:
      - .env
    stdin_open: true
    tty: true
    labels:
      - "traefik.http.routers.product.rule=Host(`product.localhost`)"
    networks:
      - microservices_network
      - mongodb_network
  
  order:
    build:
      context: ./order
    hostname: ${ORDER_HOST}
    container_name: ${ORDER_HOST}
    ports:
      - "${ORDER_PORT}:${ORDER_PORT}"
    depends_on:
      - traefik
      - mongoDB
    env_file:
      - .env
    stdin_open: true
    tty: true
    labels:
      - "traefik.http.routers.order.rule=Host(`order.localhost`)"
    networks:
      - microservices_network
      - mongodb_network
  
  monitoring:
    build:
      context: ./monitoring
    hostname: ${MONITORING_HOST}
    container_name: ${MONITORING_HOST}
    ports:
      - "${MONITORING_PORT}:${MONITORING_PORT}"
    depends_on:
      - traefik
      - restaurant
      - product
    env_file:
      - .env
    stdin_open: true
    tty: true
    labels:
     - "traefik.http.routers.monitoring.rule=Host(`monitoring.localhost`)"
    networks:
      - microservices_network
      #- mongodb_network # Peut poser problème

  mongoDB:
    image: mongo
    container_name: mongoDB
    ports:
      - "${MONGODB_PORT}:${MONGODB_PORT}"
    depends_on:
      - traefik
    volumes:
      - ./volumes/mongodb:/data/database
    labels:
     - "traefik.http.routers.mongo.rule=Host(`mongo.localhost`)"
    networks:
      - mongodb_network
      #- microservices_network # Peut poser problème

  mysql:
    image: mysql:5.7
    container_name: mySQL
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_HOST: "%"
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - ./volumes/mysql-data:/var/lib/mysql
    networks:
      - mysql_network

  phpmyadmin:
    image: phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: mysql
    ports:
      - "8081:80"

  traefik:
    image: traefik:v3.0
    container_name: traefik
    command: --api.insecure=true --providers.docker
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik-config/traefik.yml:/etc/traefik-config/traefik.yml
    networks:
      - microservices_network

networks:
  microservices_network:
    driver: bridge
  mongodb_network:
    driver: bridge
  mysql_network:
    driver: bridge

volumes:
  mongodb:
  mysql-data: